diff --git a/.gitignore b/.gitignore
index 06c406e..6891984 100644
--- a/.gitignore
+++ b/.gitignore
@@ -1 +1,2 @@
-sec-earnings-call
\ No newline at end of file
+sec-earnings-call
+__pycache__
\ No newline at end of file
diff --git a/Project.ipynb b/Project.ipynb
index 02fda46..9009241 100644
--- a/Project.ipynb
+++ b/Project.ipynb
@@ -402,6 +402,340 @@
     "            "
    ]
   },
+  {
+   "cell_type": "code",
+   "execution_count": 36,
+   "metadata": {},
+   "outputs": [],
+   "source": [
+    "from openai import AsyncOpenAI\n",
+    "from typing import List, Literal\n",
+    "from enum import Enum\n",
+    "from datetime import datetime\n",
+    "import pandas as pd\n",
+    "# We'll use a different client for async calls\n",
+    "# To highlight the difference and how we can use both\n",
+    "aclient = instructor.patch(AsyncOpenAI())\n",
+    "\n",
+    "class TickerYearQuarter(BaseModel):\n",
+    "    chain_of_thought: str = Field(\n",
+    "        description=\"Think step by step to output what is the ticker symbols, NOT THE COMPANY NAME, quarter, year and data source the question is talking about\"\n",
+    "    )\n",
+    "    ticker:List[str] \n",
+    "    year: List[str] = Field(description=\"The year that the question is talking about\")\n",
+    "    quarter: List[str] = Field(description=\"The quarter number that the question is talking about. Make sure that it starts with Q, for example Quarter 4 is Q4\")\n",
+    "    data_source: Literal[\"CALLS\",\"SEC\"] = Field(description=\"If the question is talking about SEC filings then output SEC, else if the question is talking about Earning calls transcript then output CALLS\")\n",
+    "\n",
+    "class Query(BaseModel):\n",
+    "    rewritten_query: str = Field(description=\"Rewrite the query and DON'T include the company name, years, quarters and data sources\")\n",
+    "    question_ticker_quarter_year: TickerYearQuarter\n",
+    "    def report(self):\n",
+    "        dct = self.model_dump()\n",
+    "        dct[\"usage\"] = self._raw_response.usage.model_dump()\n",
+    "        return dct\n",
+    "\n",
+    "async def expand_query(q) -> Query:\n",
+    "    datetime_obj =  datetime.today().strftime(\"%Y-%m-%d\")\n",
+    "    quarter = pd.Timestamp(datetime_obj).quarter\n",
+    "    year = pd.Timestamp(datetime_obj).year\n",
+    "    return client.chat.completions.create(\n",
+    "        model=\"gpt-3.5-turbo-0125\",\n",
+    "        temperature=0.0,\n",
+    "        response_model=Query,\n",
+    "        messages=[\n",
+    "            {\n",
+    "                \"role\": \"system\",\n",
+    "                \"content\": f\"You're a query understanding system for SEC Filings and Earnings Call. The current year is {year} and quarter {quarter}. Here are some tips: ...\",\n",
+    "            },\n",
+    "            {\"role\": \"user\", \"content\": f\"query: {q}\"},\n",
+    "        ],\n",
+    "    )"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 37,
+   "metadata": {},
+   "outputs": [
+    {
+     "data": {
+      "text/html": [
+       "Finishing last run (ID:a3mqv5x1) before initializing another..."
+      ],
+      "text/plain": [
+       "<IPython.core.display.HTML object>"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    },
+    {
+     "name": "stderr",
+     "output_type": "stream",
+     "text": [
+      "wandb: WARNING Source type is set to 'repo' but some required information is missing from the environment. A job will not be created from this run. See https://docs.wandb.ai/guides/launch/create-job\n"
+     ]
+    },
+    {
+     "data": {
+      "application/vnd.jupyter.widget-view+json": {
+       "model_id": "098fc7f22e3d41e98792d05d721cd181",
+       "version_major": 2,
+       "version_minor": 0
+      },
+      "text/plain": [
+       "VBox(children=(Label(value='0.075 MB of 0.075 MB uploaded\\r'), FloatProgress(value=1.0, max=1.0)))"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    },
+    {
+     "data": {
+      "text/html": [
+       " View run <strong style=\"color:#cdcd00\">peachy-snow-3</strong> at: <a href='https://wandb.ai/ad-finance/query/runs/a3mqv5x1' target=\"_blank\">https://wandb.ai/ad-finance/query/runs/a3mqv5x1</a><br/>Synced 5 W&B file(s), 0 media file(s), 0 artifact file(s) and 1 other file(s)"
+      ],
+      "text/plain": [
+       "<IPython.core.display.HTML object>"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    },
+    {
+     "data": {
+      "text/html": [
+       "Find logs at: <code>./wandb/run-20240226_193241-a3mqv5x1/logs</code>"
+      ],
+      "text/plain": [
+       "<IPython.core.display.HTML object>"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    },
+    {
+     "data": {
+      "text/html": [
+       "Successfully finished last run (ID:a3mqv5x1). Initializing new run:<br/>"
+      ],
+      "text/plain": [
+       "<IPython.core.display.HTML object>"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    },
+    {
+     "data": {
+      "application/vnd.jupyter.widget-view+json": {
+       "model_id": "f9787f08d1a34922a991dbc71991106d",
+       "version_major": 2,
+       "version_minor": 0
+      },
+      "text/plain": [
+       "VBox(children=(Label(value='Waiting for wandb.init()...\\r'), FloatProgress(value=0.011114099399997536, max=1.0…"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    },
+    {
+     "data": {
+      "text/html": [
+       "Tracking run with wandb version 0.16.3"
+      ],
+      "text/plain": [
+       "<IPython.core.display.HTML object>"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    },
+    {
+     "data": {
+      "text/html": [
+       "Run data is saved locally in <code>/home/athekunal/Wandb Course/Wandb-Structured-Output-Course/wandb/run-20240226_193604-y3hkd9sf</code>"
+      ],
+      "text/plain": [
+       "<IPython.core.display.HTML object>"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    },
+    {
+     "data": {
+      "text/html": [
+       "Syncing run <strong><a href='https://wandb.ai/ad-finance/query/runs/y3hkd9sf' target=\"_blank\">honest-water-4</a></strong> to <a href='https://wandb.ai/ad-finance/query' target=\"_blank\">Weights & Biases</a> (<a href='https://wandb.me/run' target=\"_blank\">docs</a>)<br/>"
+      ],
+      "text/plain": [
+       "<IPython.core.display.HTML object>"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    },
+    {
+     "data": {
+      "text/html": [
+       " View project at <a href='https://wandb.ai/ad-finance/query' target=\"_blank\">https://wandb.ai/ad-finance/query</a>"
+      ],
+      "text/plain": [
+       "<IPython.core.display.HTML object>"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    },
+    {
+     "data": {
+      "text/html": [
+       " View run at <a href='https://wandb.ai/ad-finance/query/runs/y3hkd9sf' target=\"_blank\">https://wandb.ai/ad-finance/query/runs/y3hkd9sf</a>"
+      ],
+      "text/plain": [
+       "<IPython.core.display.HTML object>"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    },
+    {
+     "name": "stderr",
+     "output_type": "stream",
+     "text": [
+      "wandb: WARNING Source type is set to 'repo' but some required information is missing from the environment. A job will not be created from this run. See https://docs.wandb.ai/guides/launch/create-job\n"
+     ]
+    },
+    {
+     "data": {
+      "application/vnd.jupyter.widget-view+json": {
+       "model_id": "12b2c5d2785d402b9f1b7c3983079a6c",
+       "version_major": 2,
+       "version_minor": 0
+      },
+      "text/plain": [
+       "VBox(children=(Label(value='0.023 MB of 0.030 MB uploaded\\r'), FloatProgress(value=0.7507964043526257, max=1.0…"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    },
+    {
+     "data": {
+      "text/html": [
+       "<style>\n",
+       "    table.wandb td:nth-child(1) { padding: 0 10px; text-align: left ; width: auto;} td:nth-child(2) {text-align: left ; width: 100%}\n",
+       "    .wandb-row { display: flex; flex-direction: row; flex-wrap: wrap; justify-content: flex-start; width: 100% }\n",
+       "    .wandb-col { display: flex; flex-direction: column; flex-basis: 100%; flex: 1; padding: 10px; }\n",
+       "    </style>\n",
+       "<div class=\"wandb-row\"><div class=\"wandb-col\"><h3>Run history:</h3><br/><table class=\"wandb\"><tr><td>average duration (s)</td><td>▁</td></tr><tr><td>duration (s)</td><td>▁</td></tr><tr><td>n_queries</td><td>▁</td></tr><tr><td>usage_completion_tokens</td><td>▁</td></tr><tr><td>usage_prompt_tokens</td><td>▁</td></tr><tr><td>usage_total_tokens</td><td>▁</td></tr></table><br/></div><div class=\"wandb-col\"><h3>Run summary:</h3><br/><table class=\"wandb\"><tr><td>average duration (s)</td><td>6.93221</td></tr><tr><td>duration (s)</td><td>27.72885</td></tr><tr><td>n_queries</td><td>4</td></tr><tr><td>usage_completion_tokens</td><td>329</td></tr><tr><td>usage_prompt_tokens</td><td>1253</td></tr><tr><td>usage_total_tokens</td><td>1582</td></tr></table><br/></div></div>"
+      ],
+      "text/plain": [
+       "<IPython.core.display.HTML object>"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    },
+    {
+     "data": {
+      "text/html": [
+       " View run <strong style=\"color:#cdcd00\">honest-water-4</strong> at: <a href='https://wandb.ai/ad-finance/query/runs/y3hkd9sf' target=\"_blank\">https://wandb.ai/ad-finance/query/runs/y3hkd9sf</a><br/>Synced 5 W&B file(s), 2 media file(s), 5 artifact file(s) and 0 other file(s)"
+      ],
+      "text/plain": [
+       "<IPython.core.display.HTML object>"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    },
+    {
+     "data": {
+      "text/html": [
+       "Find logs at: <code>./wandb/run-20240226_193604-y3hkd9sf/logs</code>"
+      ],
+      "text/plain": [
+       "<IPython.core.display.HTML object>"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    }
+   ],
+   "source": [
+    "import asyncio\n",
+    "import time\n",
+    "import pandas as pd\n",
+    "import wandb\n",
+    "from src.helpers import *\n",
+    "import json\n",
+    "model = \"gpt-3.5-turbo\"\n",
+    "temp = 0\n",
+    "\n",
+    "run = wandb.init(\n",
+    "    project=\"query\",\n",
+    "    config={\"model\": model, \"temp\": temp},\n",
+    ")\n",
+    "\n",
+    "test_queries = [\n",
+    "    \"What did Apple and Amazon do for Generative AI in 2023 in quarter 4 from earnings call?\",\n",
+    "    \"What did Apple and Amazon do for Generative AI in 2023 in quarter 4 and quarter 3?\",\n",
+    "    \"Compare the total revenue generated by Apple and Amazon for the year 2023 and quarter 4 from earnings call\",\n",
+    "    \"How did Amazon AWS perform for the year 2023 and quarter 4?\",\n",
+    "    \"Compare the iPhone sales for Apple from 2023 quarter 3 to quarter 4\",\n",
+    "    \"Did Apple face any geographical challenges in quarter 3 in 2022 and 2021?\"\n",
+    "]\n",
+    "start = time.perf_counter()\n",
+    "queries = await asyncio.gather(\n",
+    "    *[expand_query(q) for q in test_queries]\n",
+    ")\n",
+    "duration = time.perf_counter() - start\n",
+    "\n",
+    "with open(\"schema.json\", \"w+\") as f:\n",
+    "    schema = Query.model_json_schema()\n",
+    "    json.dump(schema, f, indent=2)\n",
+    "\n",
+    "with open(\"results.jsonlines\", \"w+\") as f:\n",
+    "    for query in queries:\n",
+    "        f.write(query.model_dump_json() + \"\\n\")\n",
+    "\n",
+    "df = dicts_to_df([q.report() for q in queries])\n",
+    "df[\"input\"] = test_queries\n",
+    "df.to_csv(\"results.csv\")\n",
+    "\n",
+    "\n",
+    "run.log({\"schema\": wandb.Table(dataframe=pd.DataFrame([{\"schema\": schema}]))})\n",
+    "\n",
+    "run.log(\n",
+    "    {\n",
+    "        \"usage_total_tokens\": df[\"usage_total_tokens\"].sum(),\n",
+    "        \"usage_completion_tokens\": df[\"usage_completion_tokens\"].sum(),\n",
+    "        \"usage_prompt_tokens\": df[\"usage_prompt_tokens\"].sum(),\n",
+    "        \"duration (s)\": duration,\n",
+    "        \"average duration (s)\": duration / len(queries),\n",
+    "        \"n_queries\": len(queries),\n",
+    "    }\n",
+    ")\n",
+    "\n",
+    "\n",
+    "run.log(\n",
+    "    {\n",
+    "        \"results\": wandb.Table(dataframe=df),\n",
+    "    }\n",
+    ")\n",
+    "\n",
+    "files = wandb.Artifact(\"data\", type=\"dataset\")\n",
+    "\n",
+    "files.add_file(\"schema.json\")\n",
+    "files.add_file(\"results.jsonlines\")\n",
+    "files.add_file(\"results.csv\")\n",
+    "\n",
+    "\n",
+    "run.log_artifact(files)\n",
+    "run.finish()"
+   ]
+  },
   {
    "cell_type": "code",
    "execution_count": null,
